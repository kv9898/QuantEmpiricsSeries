notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('ATT by month'=lm_ev_sum), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"="lm_ev_dk"), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
lm_ev
lm_ev_dk
data_es <- subset(data[order(data$Unit,data$M.unit),], weights!=0)
data_es$time_to_treat = ifelse(data_es$Unit==1, data_es$M.unit, 0)
lm_ev_dk <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4)|Country + M.unit, data = data_es, weights = data_only$weights, panel.id=~Country+M.unit, vcov="DK")
lm_ev <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4) + factor(M.unit)|Country, data = data_es, weights = data_es$weights)
es_results <- data.frame(event_dates = numeric(), estimates = numeric(), lower_ci = numeric(),
upper_ci = numeric(), lower_90 = numeric(), upper_90 = numeric(), p.value=numeric(), dk_se=numeric(), stringsAsFactors = FALSE)
for (x in 0:6){
dqrng::dqset.seed(seed)
lm_ev_wild <- boottest(lm_ev, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=NULL, type="webb")
dqrng::dqset.seed(seed)
lm_ev_wild90 <- boottest(lm_ev, sign_level=0.10, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=NULL, type="webb")
es_results[x+1,1] <- x
es_results[x+1,2] <- lm_ev_wild$point_estimate
es_results[x+1,3] <- lm_ev_wild$conf_int[1]
es_results[x+1,4] <- lm_ev_wild$conf_int[2]
es_results[x+1,5] <- lm_ev_wild90$conf_int[1]
es_results[x+1,6] <- lm_ev_wild90$conf_int[2]
es_results[x+1,7] <- lm_ev_wild$p_val
es_results[x+1,8] <- se(lm_ev_dk)[[paste0("time_to_treat::",x,":treated")]]
}
for (x in 0:6){
dqrng::dqset.seed(seed)
lm_ev_wild <- boottest(lm_ev, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=Country, type="webb")
dqrng::dqset.seed(seed)
lm_ev_wild90 <- boottest(lm_ev, sign_level=0.10, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=Country, type="webb")
es_results[x+1,1] <- x
es_results[x+1,2] <- lm_ev_wild$point_estimate
es_results[x+1,3] <- lm_ev_wild$conf_int[1]
es_results[x+1,4] <- lm_ev_wild$conf_int[2]
es_results[x+1,5] <- lm_ev_wild90$conf_int[1]
es_results[x+1,6] <- lm_ev_wild90$conf_int[2]
es_results[x+1,7] <- lm_ev_wild$p_val
es_results[x+1,8] <- se(lm_ev_dk)[[paste0("time_to_treat::",x,":treated")]]
}
class(lm_ev_sum) <- "bootevent"
tidy.bootevent <- function(x, ...) {
ret <- data.frame(
term      = x$estimates$event_dates,
estimate  = x$estimates$estimates,
conf.low  = x$estimates$lower_ci,
conf.high = x$estimates$upper_ci,
p.value   = x$estimates$p.value)
ret
}
glance.bootevent <- function(x, ...) {
ret <- data.frame(
r.squared = x$r.squared,
adj.r.squared= x$adj.r.squared,
nobs  = x$nobs,
fe.u  = 'Yes',
fe.t  = 'Yes')
ret
}
gofmap <- list(list("raw" = "fe.u", "clean" = "Country FE", "fmt" = NULL),
list("raw" = "fe.t", "clean" = "Time FE", "fmt" = NULL),
list("raw" = "nobs", "clean" = "Effective N", "fmt" = 0),
list("raw" = "r.squared", "clean" = "R2", "fmt" = 3),
list("raw" = "adj.r.squared", "clean" = "R2 Adj.", "fmt" = 3))
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('ATT by month'=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
lm_ev_dk
lm_ev
rm(list = ls()) # clear workspace
#remotes::install_github("bcastanho/SCtools")
#devtools::install_github("synth-inference/synthdid") #manually install sdid if the codes above fail to do so automatically
need <- c("modelsummary","rstudioapi","haven","fixest","car","parameters",
"Synth","synthdid","SCtools","ggplot2","tidyverse","fwildclusterboot") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set working directory to the file directory
list.files()
data <- read.csv("month.csv")
seed=666 #seed for wild-cluster bootstrapping
set.seed(seed)
#logbilateral.trade
data$logbilateral.trade <- log(data$bilateral.trade)
data$treated <- ifelse(data$Unit == 1 & data$M.unit >= 0, 1,0 ) #data cleaning for synthdid
setup = panel.matrices(data, unit = "Country", time = "M.unit", outcome = "logbilateral.trade", treatment = "treated")
#3 in one diagram
tau.hat.log = synthdid_estimate(setup$Y, setup$N0, setup$T0)
#plot(tau.hat.log, treated.name = "log C-P trade", control.name = "log synthetic C-P trade")
tau.hat.sc = sc_estimate(setup$Y, setup$N0, setup$T0)
tau.hat.did = did_estimate(setup$Y, setup$N0, setup$T0)
#data <- subset(data, select = -c(omega, lambda, weights))
data$omega [data$Country == data$Country [data$treated==1][1]] <- 1
T1 <- length(data$Country[data$treated==1])
data$lambda [data$M.unit %in% data$M.unit[data$treated==1]] <- 1/T1
omega.df <- data.frame(Country = rownames(attributes(tau.hat.log)$setup$Y)[-nrow(attributes(tau.hat.log)$setup$Y)], omega = attributes(tau.hat.log)$weights$omega)
lambda.df <- data.frame(M.unit = colnames(attributes(tau.hat.log)$setup$Y)[1:(length(colnames(attributes(tau.hat.log)$setup$Y))-T1)], lambda = attributes(tau.hat.log)$weights$lambda)
data <- merge(data, omega.df, by = "Country", all = TRUE, no.dups = TRUE)
data$omega <- ifelse(is.na(data$omega.x),data$omega.y,data$omega.x)
data <- subset(data, select = -c(omega.x,omega.y))
data <- merge(data, lambda.df, by = "M.unit", all = TRUE, no.dups = TRUE)
data$lambda <- ifelse(is.na(data$lambda.x),data$lambda.y,data$lambda.x)
data <- subset(data, select = -c(lambda.x, lambda.y))
data$weights <- data$lambda * data$omega
data_only <- subset(data, weights!=0)
lm_sdid_dk <- feols(logbilateral.trade ~ treated|Country + M.unit, data = data_only, weights = data_only$weights, panel.id=~Country+M.unit, vcov="DK")
lm_sdid_dk
lm_sdid <- feols(logbilateral.trade ~ treated + factor(Country) + factor(M.unit), data = data_only, weights = data_only$weights)
dqrng::dqset.seed(seed)
lm_sdid_wild <-  boottest(lm_sdid, param="treated", B=9999, clustid="Unit", fe=NULL, type="webb")
lm_sdid_wild
lm_sdid
models <- list(lm_sdid_dk, lm_sdid_wild)
glance_custom.boottest <- function(x, ...) {
data.frame(
'fe.u'=ifelse(x$call$object!="lm_sc",'Yes','No'),
'fe.t'= "Yes",
"vcov.type"="WCB by Country"
)
}
glance_custom.fixest <- function(x, ...) {
data.frame('fe.u'=ifelse("Country" %in% names(x$fixef_id),"Yes","No"),
'fe.t'=ifelse("M.unit" %in% names(x$fixef_id),"Yes","No")
)}
gofmap <- list(list("raw" = "fe.u", "clean" = "Country FE", "fmt" = NULL),
list("raw" = "fe.t", "clean" = "Time FE", "fmt" = NULL),
list("raw" = "nobs", "clean" = "Effective N", "fmt" = 0),
list('raw'="vcov.type", "clean" = "Inference type", "fmt" = NULL))
modelsummary(models, estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are smaller due to zero time and unit weights.",
"P-values in parentheses; WCB CIs are calculated with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
coef_rename = c("1*treated = 0" = "ATT", "treated"="ATT"),
output="default")
modelsummary(models, estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are smaller due to zero time and unit weights.",
"P-values in parentheses; WCB CIs are calculated with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
coef_rename = c("1*treated = 0" = "ATT", "treated"="ATT"), fmt=3,
output="default")
modelsummary(models, estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are smaller due to zero time and unit weights.",
"P-values in parentheses; WCB CIs are calculated with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
coef_rename = c("1*treated = 0" = "ATT", "treated"="ATT"), fmt=5,
output="default")
modelsummary(models, estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are smaller due to zero time and unit weights.",
"P-values in parentheses; WCB CIs are calculated with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
coef_rename = c("1*treated = 0" = "ATT", "treated"="ATT"), fmt=4,
output="default")
data_es <- subset(data[order(data$Unit,data$M.unit),], weights!=0)
data_es$time_to_treat = ifelse(data_es$Unit==1, data_es$M.unit, 0)
lm_ev_dk <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4)|Country + M.unit, data = data_es, weights = data_only$weights, panel.id=~Country+M.unit, vcov="DK")
lm_ev <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4) + factor(Country) + factor(M.unit), data = data_es, weights = data_es$weights, cluster='Country')
es_results <- data.frame(event_dates = numeric(), estimates = numeric(), lower_ci = numeric(),
upper_ci = numeric(), lower_90 = numeric(), upper_90 = numeric(), p.value=numeric(), dk_se=numeric(), stringsAsFactors = FALSE)
lm_ev_dk
lm_ev
lm_ev_dk <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4)+factor(Country) + factor(M.unit), data = data_es, weights = data_only$weights, panel.id=~Country+M.unit, vcov="DK")
lm_ev_dk
View(data_es)
View(data_es)
data_es <- subset(data[order(data$Unit,data$M.unit),], weights!=0)
data_es$time_to_treat = ifelse(data_es$Unit==1, data_es$M.unit, 0)
lm_ev_dk <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4)|Country + M.unit, data = data_es, weights = data_es$weights, panel.id=~Country+M.unit, vcov="DK")
lm_ev <- feols(logbilateral.trade ~ i(time_to_treat, treated, ref=-4) + factor(Country) + factor(M.unit), data = data_es, weights = data_es$weights, cluster='Country')
es_results <- data.frame(event_dates = numeric(), estimates = numeric(), lower_ci = numeric(),
upper_ci = numeric(), lower_90 = numeric(), upper_90 = numeric(), p.value=numeric(), dk_se=numeric(), stringsAsFactors = FALSE)
for (x in 0:6){
dqrng::dqset.seed(seed)
lm_ev_wild <- boottest(lm_ev, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=NULL, type="webb")
dqrng::dqset.seed(seed)
lm_ev_wild90 <- boottest(lm_ev, sign_level=0.10, param=paste0("time_to_treat::",x,":treated"), B=999, clustid="Country", fe=NULL, type="webb")
es_results[x+1,1] <- x
es_results[x+1,2] <- lm_ev_wild$point_estimate
es_results[x+1,3] <- lm_ev_wild$conf_int[1]
es_results[x+1,4] <- lm_ev_wild$conf_int[2]
es_results[x+1,5] <- lm_ev_wild90$conf_int[1]
es_results[x+1,6] <- lm_ev_wild90$conf_int[2]
es_results[x+1,7] <- lm_ev_wild$p_val
es_results[x+1,8] <- se(lm_ev_dk)[[paste0("time_to_treat::",x,":treated")]]
}
lm_ev_sum=list(nobs=lm_ev$nobs, r.squared=get_gof(lm_ev)$r.squared,
adj.r.squared=get_gof(lm_ev)$adj.r.squared,
estimates=es_results)
es_results <- rbind(data.frame(event_dates=-1, estimates=0, lower_ci=0, upper_ci=0, lower_90=0, upper_90=0, dk_se=0, p.value=0), es_results)
ggplot(es_results, aes(x = event_dates, y = estimates))+ ggtitle("Event Study Style Plot: Total bilateral trade volumes") +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
geom_errorbar(aes(x = event_dates-0.1, ymin = lower_ci, ymax = upper_ci, color="WCB"), width = 0.2) +
geom_line() +
geom_errorbar(aes(x = event_dates-0.1, ymin = lower_90, ymax = upper_90, color="WCB"), width = 0.1) +
geom_errorbar(aes(x = event_dates+0.1, ymin = estimates - 1.96*dk_se, ymax = estimates + 1.96*dk_se,
color = "DK"), width = 0.2) +
geom_errorbar(aes(x = event_dates+0.1, ymin = estimates - 1.645*dk_se, ymax = estimates + 1.645*dk_se,
color = "DK"), width = 0.1) +
labs(x="Months since treatment",y="ATT with 90% and 95% CIs")  +
geom_vline(xintercept = -1, linetype = "dashed") + geom_point(size = 2) +
theme_minimal() + theme(panel.background = element_rect(fill = "white"))+
scale_color_manual(name= 'Inference Method',
breaks=c('WCB','DK'),
values=c('WCB'="#1f78b4", "DK"="#E41A1C"))
#event-study regression table
class(lm_ev_sum) <- "bootevent"
tidy.bootevent <- function(x, ...) {
ret <- data.frame(
term      = x$estimates$event_dates,
estimate  = x$estimates$estimates,
conf.low  = x$estimates$lower_ci,
conf.high = x$estimates$upper_ci,
p.value   = x$estimates$p.value)
ret
}
glance.bootevent <- function(x, ...) {
ret <- data.frame(
r.squared = x$r.squared,
adj.r.squared= x$adj.r.squared,
nobs  = x$nobs,
fe.u  = 'Yes',
fe.t  = 'Yes')
ret
}
gofmap <- list(list("raw" = "fe.u", "clean" = "Country FE", "fmt" = NULL),
list("raw" = "fe.t", "clean" = "Time FE", "fmt" = NULL),
list("raw" = "nobs", "clean" = "Effective N", "fmt" = 0),
list("raw" = "r.squared", "clean" = "R2", "fmt" = 3),
list("raw" = "adj.r.squared", "clean" = "R2 Adj.", "fmt" = 3))
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat = 0 × treated"= "0",
"time_to_treat = 1 × treated"= "1",
"time_to_treat = 2 × treated"= "2",
"time_to_treat = 3 × treated"= "3",
"time_to_treat = 4 × treated"= "4",
"time_to_treat = 5 × treated"= "5",
"time_to_treat = 6 × treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_rename=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_rename=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01", coef_rename=coefmap,
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01", coef_rename=coefmap,
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat = 0 × treated"= "0",
"0" = "0,"
"time_to_treat = 1 × treated"= "1",
coefmap <- c("time_to_treat = 0 × treated"= "0",
"0" = "0",
"time_to_treat = 1 × treated"= "1",
"time_to_treat = 2 × treated"= "2",
"time_to_treat = 3 × treated"= "3",
"time_to_treat = 4 × treated"= "4",
"time_to_treat = 5 × treated"= "5",
"time_to_treat = 6 × treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01", coef_map=coefmap,
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month",coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat = 0 × treated"= "0",
"time_to_treat = 1 × treated"= "1",
"time_to_treat = 2 × treated"= "2",
"time_to_treat = 3 × treated"= "3",
"time_to_treat = 4 × treated"= "4",
"time_to_treat = 5 × treated"= "5",
"time_to_treat = 6 × treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_rename=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat::0:treated"= "0",
"time_to_treat = 1 × treated"= "1",
"time_to_treat = 2 × treated"= "2",
"time_to_treat = 3 × treated"= "3",
"time_to_treat = 4 × treated"= "4",
"time_to_treat = 5 × treated"= "5",
"time_to_treat = 6 × treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_rename=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat::0:treated"= "0",
"time_to_treat::1:treated"= "1",
"time_to_treat::2:treated"= "2",
"time_to_treat::3:treated"= "3",
"time_to_treat::4:treated"= "4",
"time_to_treat::5:treated"= "5",
"time_to_treat::6:treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_rename=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
coefmap <- c("time_to_treat::0:treated"= "0",
"time_to_treat::1:treated"= "1",
"time_to_treat::2:treated"= "2",
"time_to_treat::3:treated"= "3",
"time_to_treat::4:treated"= "4",
"time_to_treat::5:treated"= "5",
"time_to_treat::6:treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
View(es_results)
coefmap <- c("time_to_treat::0:treated"= "0",
"0" = "0",
"time_to_treat::1:treated"= "1",
"time_to_treat::2:treated"= "2",
"time_to_treat::3:treated"= "3",
"time_to_treat::4:treated"= "4",
"time_to_treat::5:treated"= "5",
"time_to_treat::6:treated"= "6")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
for (x in 0:6){
print(x)
}
str(0)
character(0)
print(str(0))
as.string(0)
as.character(0)
for (x in 0:6){
append(x, as.character(x)=ascharacter(x))
coefmap <- c("time_to_treat::0:treated"= "0",
"0" = "0",
"time_to_treat::1:treated"= "1",
"1" = "1"
"time_to_treat::2:treated"= "2",
coefmap <- c("time_to_treat::0:treated"= "0",
"0" = "0",
"time_to_treat::1:treated"= "1",
"1" = "1",
"time_to_treat::2:treated"= "2",
"time_to_treat::3:treated"= "3",
"time_to_treat::4:treated"= "4",
"time_to_treat::5:treated"= "5",
"time_to_treat::6:treated"= "6")
coefmap
type(coefmap)
object(coefmap)
class(coefmap)
for (x in 0:6){
append(x, as.character(x))
}
coefmap
for (x in 0:6){
append(coefmap, as.character(x))
}
coefmap
coefmap <- c("time_to_treat::0:treated"= "0",
"0" = "0",
"time_to_treat::1:treated"= "1",
"1" = "1",
"time_to_treat::2:treated"= "2",
"time_to_treat::3:treated"= "3",
"time_to_treat::4:treated"= "4",
"time_to_treat::5:treated"= "5",
"time_to_treat::6:treated"= "6")
for (x in 0:6){
append(coefmap, as.character(x))
}
coefmap
for (x in 0:6){
append(coefmap, as.character(x)=as.character(x))
for (x in 0:6){
append(coefmap, values=c(as.character(x)=as.character(x)))
for (x in 0:6){
append(coefmap, c(as.character(x)=as.character(x)))
a <- c("time_to_treat"="0")
print(a)
coefmap <- c()
for (x in 0:6){
a <- c(as.character(x)=as.character(x)
coefmap <- c()
for (x in 0:6){
a <- c(as.character(x)=as.character(x))
for (x in 0:6){
a <- c(as.character(x) = as.character(x))
coefmap <- c()
for (x in 0:6){
coefmap[paste0("time_to_treat::", x, ":treated")] <- as.character(x)
coefmap[as.character(x)] <- as.character(x)
}
coefmap
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are small due to zero time and unit weights.",
"CIs are calculated through Wild Cluster Bootstrapping by country with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
modelsummary(list('WCB'=lm_ev_sum, "DK"=lm_ev_dk), estimate = "{estimate} ({p.value}){stars}", statistic = "[{conf.low}, {conf.high}]",
title="ATT by month", coef_map=coefmap,
notes=c("* p < 0.1, ** p < 0.05, *** p < 0.01",
"Effective observations for SDID are smaller due to zero time and unit weights.",
"P-values in parentheses; WCB CIs are calculated with Webb weights."),
stars = c('*' = .1, '**' = .05, '***' = .01), gof_map = gofmap,
output="default")
